# SPDX-FileCopyrightText: Copyright (c) 2025 Cisco and/or its affiliates.
# SPDX-License-Identifier: Apache-2.0
# generated by fastapi-codegen:
#   filename:  openapi.json

from __future__ import annotations

import json
import logging
import os
from typing import Any, Union

from core.config import settings
from fastapi import APIRouter, HTTPException, status, FastAPI, Request
from fastapi.responses import JSONResponse
from models.models import ErrorResponse, ReviewComments, RunCreateStateless, ReviewRequest,ReviewComment,ReviewResponse
from utils.wrap_prompt import wrap_prompt

router = APIRouter(tags=["Stateless Runs"])
logger = logging.getLogger(__name__)  # This will be "app.api.routes.<name>"

def get_code_reviewer_chain(app: FastAPI):
    """
    Retrieves the initialized CodeReviewer instance from FastAPI app state.

    Args:
        app (FastAPI): The FastAPI application instance.

    Returns:
        CodeReviewer: The initialized CodeReviewer instance.
    """
    code_reviewer_chain = app.state.code_reviewer_chain
    if code_reviewer_chain is None:
        raise HTTPException(status_code=500, detail="CodeReviewer not initialized")
    return code_reviewer_chain



@router.post(
    "/runs",
    response_model=ReviewResponse,
    responses={
        "404": {"model": ErrorResponse},
        "409": {"model": ErrorResponse},
        "422": {"model": ErrorResponse},
    },
    tags=["Stateless Runs"],
)
def run_stateless_runs_post(body: RunCreateStateless, request: Request) -> Union[ReviewResponse, ErrorResponse]:
    """
    Create Background Run
    """
    try:
        app = request.app
        code_reviewer_chain = get_code_reviewer_chain(app)

        review_request: ReviewRequest = body.input

        logger.info("Received valid request. Processing code review.")

        # ---- Code Reviewer Logic ----
        # Construct LLM prompt

        response: ReviewComments = code_reviewer_chain.invoke(
            {
                "question": wrap_prompt(
                    "FILES:",
                    f"{'\n'.join(map(str, review_request.context_files))}",
                    "",
                    "CHANGES:" f"{review_request.changes}",
                    "",
                    "STATIC_ANALYZER_OUTPUT:",
                    f"{review_request.static_analyzer_output}",
                )
            }
        )

    except HTTPException as http_exc:
        # Log HTTP exceptions and re-raise them so that FastAPI can generate the appropriate response.
        logging.error("HTTP error during run processing: %s", http_exc.detail)
        raise http_exc

    except Exception as exc:
        # Catch unexpected exceptions, log them, and return a 500 Internal Server Error.
        logging.exception("An unexpected error occurred while processing the run.")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=exc,
        )

    # Construct structured response from the code review comments
    filtered_comments = [
        comment.model_dump() for comment in response.issues if comment.line_number != 0
    ]

    payload = ReviewResponse(
        agent_id=body.agent_id or "default-agent",
        output={"messages":[{"role":"assistant","content":json.dumps(filtered_comments)}]},
        model=body.model or "gpt-4o",
        metadata={"id": body.metadata.get("id", "default-id") if body.metadata else "default-id"},
    )

    logger.info(f"Returning review response: {payload.model_dump()}")

    return payload


@router.post(
    "/runs/stream",
    response_model=str,
    responses={
        "404": {"model": ErrorResponse},
        "409": {"model": ErrorResponse},
        "422": {"model": ErrorResponse},
    },
    tags=["Stateless Runs"],
)
def stream_run_stateless_runs_stream_post(
    body: RunCreateStateless,
) -> Union[str, ErrorResponse]:
    """
    Create Run, Stream Output
    """
    pass


@router.post(
    "/runs/wait",
    response_model=Any,
    responses={
        "404": {"model": ErrorResponse},
        "409": {"model": ErrorResponse},
        "422": {"model": ErrorResponse},
    },
    tags=["Stateless Runs"],
)
def wait_run_stateless_runs_wait_post(
    body: RunCreateStateless,
) -> Union[Any, ErrorResponse]:
    """
    Create Run, Wait for Output
    """
    pass
